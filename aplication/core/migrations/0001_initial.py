# Generated by Django 5.2.3 on 2025-06-20 05:24

import aplication.core.utils
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CommunityPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contenido', models.TextField(max_length=500)),
                ('likes', models.IntegerField(default=0)),
                ('comments_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EvaluacionFisica',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('imagen', models.ImageField(help_text='Imagen corporal para la evaluación', upload_to='evaluaciones_fisicas/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'webp']), aplication.core.utils.validate_image_size])),
                ('altura_cm', models.FloatField(blank=True, help_text='Altura en cm', null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(250)])),
                ('peso_kg', models.FloatField(blank=True, help_text='Peso en kg', null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(300)])),
                ('porcentaje_grasa', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('procesada', models.BooleanField(default=False)),
                ('objetivo', models.CharField(blank=True, choices=[('perder_grasa', 'Perder grasa'), ('tonificar', 'Tonificar'), ('ganar_musculo', 'Ganar músculo'), ('salud_general', 'Mejorar salud general')], max_length=50, null=True)),
                ('recomendacion_msj', models.TextField(blank=True, help_text='Mensaje de recomendación basado en % de grasa y sexo', null=True)),
            ],
            options={
                'verbose_name': 'Evaluación Física',
                'verbose_name_plural': 'Evaluaciones Físicas',
                'ordering': ['-fecha'],
            },
        ),
        migrations.CreateModel(
            name='MensajeMotivacional',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('texto', models.CharField(max_length=255)),
                ('categoria', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='PlanEntrenamiento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('descripcion', models.TextField()),
                ('dias_por_semana', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('fecha_asignacion', models.DateTimeField(auto_now_add=True)),
                ('activo', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='PlanNutricion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descripcion', models.TextField()),
                ('calorias', models.IntegerField()),
                ('macros', models.JSONField(blank=True, null=True)),
                ('fecha_asignacion', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Progreso',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateField(auto_now_add=True)),
                ('peso_actual', models.FloatField()),
                ('grasa_estimada', models.FloatField()),
                ('nota', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Recomendacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text="Título corto de la recomendación (p.ej. 'Obesidad alta')", max_length=100)),
                ('sexo', models.CharField(blank=True, choices=[('M', 'Masculino'), ('F', 'Femenino')], help_text='Dejar vacío si aplica a ambos sexos', max_length=1, null=True)),
                ('objetivo', models.CharField(blank=True, choices=[('perder_grasa', 'Perder grasa'), ('tonificar', 'Tonificar'), ('ganar_musculo', 'Ganar músculo'), ('salud_general', 'Mejorar salud general')], help_text='Si aplica solo a un objetivo concreto', max_length=50, null=True)),
                ('porcentaje_min', models.FloatField(help_text='Valor mínimo de % grasa (inclusive)')),
                ('porcentaje_max', models.FloatField(help_text='Valor máximo de % grasa (exclusive)')),
                ('mensaje', models.TextField(help_text='Texto que se mostrará al usuario')),
            ],
            options={
                'verbose_name': 'Recomendación',
                'verbose_name_plural': 'Recomendaciones',
                'ordering': ['porcentaje_min'],
            },
        ),
    ]
